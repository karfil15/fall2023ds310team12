{
	"name": "metrics and policy",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ParquetCosmosDB",
						"type": "DatasetReference"
					},
					"name": "cosmosdb"
				},
				{
					"dataset": {
						"referenceName": "Parquetazuresqlmetrics",
						"type": "DatasetReference"
					},
					"name": "azuresqlmetrics"
				},
				{
					"dataset": {
						"referenceName": "Parquetazuresqlcountry",
						"type": "DatasetReference"
					},
					"name": "azuresqlcountry"
				},
				{
					"dataset": {
						"referenceName": "Parquetazuresqldate",
						"type": "DatasetReference"
					},
					"name": "azuresqldate"
				},
				{
					"dataset": {
						"referenceName": "Parquetvmmetrics",
						"type": "DatasetReference"
					},
					"name": "vmmetrics"
				},
				{
					"dataset": {
						"referenceName": "Parquetvmcountry",
						"type": "DatasetReference"
					},
					"name": "vmcountry"
				},
				{
					"dataset": {
						"referenceName": "Parquetvmdate",
						"type": "DatasetReference"
					},
					"name": "vmdate"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ParquetSinkMetricPolicy",
						"type": "DatasetReference"
					},
					"name": "metricspolicysink"
				}
			],
			"transformations": [
				{
					"name": "cosmosdbcolumns"
				},
				{
					"name": "azuresqlmetricsselect"
				},
				{
					"name": "azuresqlcountryselect"
				},
				{
					"name": "azuresqldateselect"
				},
				{
					"name": "vmmetricsselect"
				},
				{
					"name": "vmcountryselect"
				},
				{
					"name": "vmdateselect"
				},
				{
					"name": "metricsandpolicyunion"
				}
			],
			"scriptLines": [
				"source(output(",
				"          countryname as string,",
				"          countrycode as string,",
				"          regionname as integer,",
				"          regioncode as integer,",
				"          jurisdiction as string,",
				"          date as timestamp,",
				"          c1_school_closing as double,",
				"          c1_flag as boolean,",
				"          c2_workplace_closing as double,",
				"          c2_flag as boolean,",
				"          c3_cancel_public_events as double,",
				"          c3_Flag as boolean,",
				"          c4_restrictions_on_gatherings as double,",
				"          c4_flag as boolean,",
				"          c5_close_public_transport as double,",
				"          c5_flag as boolean,",
				"          c6_stay_at_home_requirements as double,",
				"          c6_flag as boolean,",
				"          c7_restrictions_on_internal_movement as double,",
				"          c7_flag as boolean,",
				"          c8_international_travel_controls as double,",
				"          e1_income_support as double,",
				"          e1_flag as boolean,",
				"          e2_debt_contract_relief as double,",
				"          e3_fiscal_measures as double,",
				"          e4_international_support as double,",
				"          h1_public_information_campaigns as double,",
				"          h1_flag as boolean,",
				"          h2_testing_policy as double,",
				"          h3_contact_tracing as double,",
				"          h4_emergency_investment_in_healthcare as double,",
				"          h5_investment_in_vaccines as double,",
				"          h6_facial_coverings as double,",
				"          h6_flag as boolean,",
				"          h7_vaccination_policy as double,",
				"          h7_flag as boolean,",
				"          h8_protection_of_elderly_people as double,",
				"          h8_flag as boolean,",
				"          m1_wildcard as double,",
				"          stringencyindex as double,",
				"          stringencyindexfordisplay as double,",
				"          stringencylegacyindex as double,",
				"          stringencylegacyindexfordisplay as double,",
				"          governmentresponseindex as double,",
				"          governmentresponseindexfordisplay as double,",
				"          containmenthealthindex as double,",
				"          containmenthealthindexfordisplay as double,",
				"          economicsupportindex as double,",
				"          economicsupportindexfordisplay as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> cosmosdb",
				"source(output(",
				"          ID as integer,",
				"          Updated as date,",
				"          Confirmed as integer,",
				"          Confirmed_Change as integer,",
				"          Deaths as integer,",
				"          Deaths_Change as integer,",
				"          Recovered as integer,",
				"          Recovered_Change as integer,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5),",
				"          ISO2 as string,",
				"          ISO3 as string,",
				"          Country_Region as string,",
				"          load_time as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> azuresqlmetrics",
				"source(output(",
				"          Country as string,",
				"          CountryCode as string,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> azuresqlcountry",
				"source(output(",
				"          DateKey as integer,",
				"          FullDate as date,",
				"          isWeekDay as boolean,",
				"          DayOfWeek as integer,",
				"          DayOfMonth as integer,",
				"          DayOfQuarter as integer,",
				"          DayOfYear as integer,",
				"          DayName as string,",
				"          WeekOfYear as integer,",
				"          WeekName as string,",
				"          MonthOfYear as integer,",
				"          MonthName as string,",
				"          CalendarQuarter as integer,",
				"          CalendarQuarterName as string,",
				"          CalendarYear as integer,",
				"          FiscalMonth as integer,",
				"          FiscalMonthName as string,",
				"          FiscalQuarter as integer,",
				"          FiscalQuarterName as string,",
				"          FiscalYear as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> azuresqldate",
				"source(output(",
				"          ID as integer,",
				"          Updated as date,",
				"          Confirmed as integer,",
				"          Confirmed_Change as integer,",
				"          Deaths as integer,",
				"          Deaths_Change as integer,",
				"          Recovered as integer,",
				"          Recovered_Change as integer,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5),",
				"          ISO2 as string,",
				"          ISO3 as string,",
				"          Country_Region as string,",
				"          load_time as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> vmmetrics",
				"source(output(",
				"          Country as string,",
				"          CountryCode as string,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> vmcountry",
				"source(output(",
				"          DateKey as integer,",
				"          FullDate as date,",
				"          isWeekDay as boolean,",
				"          DayOfWeek as integer,",
				"          DayOfMonth as integer,",
				"          DayOfQuarter as integer,",
				"          DayOfYear as integer,",
				"          DayName as string,",
				"          WeekOfYear as integer,",
				"          WeekName as string,",
				"          MonthOfYear as integer,",
				"          MonthName as string,",
				"          CalendarQuarter as integer,",
				"          CalendarQuarterName as string,",
				"          CalendarYear as integer,",
				"          FiscalMonth as integer,",
				"          FiscalMonthName as string,",
				"          FiscalQuarter as integer,",
				"          FiscalQuarterName as string,",
				"          FiscalYear as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> vmdate",
				"cosmosdb select(mapColumn(",
				"          countryname,",
				"          countrycode,",
				"          regionname,",
				"          regioncode,",
				"          jurisdiction,",
				"          date,",
				"          c1_school_closing,",
				"          c1_flag,",
				"          c2_workplace_closing,",
				"          c2_flag,",
				"          c3_cancel_public_events,",
				"          c3_Flag,",
				"          c4_restrictions_on_gatherings,",
				"          c4_flag,",
				"          c5_close_public_transport,",
				"          c5_flag,",
				"          c6_stay_at_home_requirements,",
				"          c6_flag,",
				"          c7_restrictions_on_internal_movement,",
				"          c7_flag,",
				"          c8_international_travel_controls,",
				"          e1_income_support,",
				"          e1_flag,",
				"          e2_debt_contract_relief,",
				"          e3_fiscal_measures,",
				"          e4_international_support,",
				"          h1_public_information_campaigns,",
				"          h1_flag,",
				"          h2_testing_policy,",
				"          h3_contact_tracing,",
				"          h4_emergency_investment_in_healthcare,",
				"          h5_investment_in_vaccines,",
				"          h6_facial_coverings,",
				"          h6_flag,",
				"          h7_vaccination_policy,",
				"          h7_flag,",
				"          h8_protection_of_elderly_people,",
				"          h8_flag,",
				"          m1_wildcard,",
				"          stringencyindex,",
				"          stringencyindexfordisplay,",
				"          stringencylegacyindex,",
				"          stringencylegacyindexfordisplay,",
				"          governmentresponseindex,",
				"          governmentresponseindexfordisplay,",
				"          containmenthealthindex,",
				"          containmenthealthindexfordisplay,",
				"          economicsupportindex,",
				"          economicsupportindexfordisplay",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> cosmosdbcolumns",
				"azuresqlmetrics select(mapColumn(",
				"          ID,",
				"          Updated,",
				"          Confirmed,",
				"          Confirmed_Change,",
				"          Deaths,",
				"          Deaths_Change,",
				"          Recovered,",
				"          Recovered_Change,",
				"          Latitude,",
				"          Longitude,",
				"          ISO2,",
				"          ISO3,",
				"          Country_Region,",
				"          load_time",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> azuresqlmetricsselect",
				"azuresqlcountry select(mapColumn(",
				"          Country,",
				"          CountryCode,",
				"          Latitude,",
				"          Longitude",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> azuresqlcountryselect",
				"azuresqldate select(mapColumn(",
				"          DateKey,",
				"          Date = FullDate,",
				"          isWeekDay,",
				"          DayOfWeek,",
				"          DayOfMonth,",
				"          DayOfQuarter,",
				"          DayOfYear,",
				"          DayName,",
				"          WeekOfYear,",
				"          WeekName,",
				"          MonthOfYear,",
				"          MonthName,",
				"          CalendarQuarter,",
				"          CalendarQuarterName,",
				"          CalendarYear,",
				"          FiscalMonth,",
				"          FiscalMonthName,",
				"          FiscalQuarter,",
				"          FiscalQuarterName,",
				"          FiscalYear",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> azuresqldateselect",
				"vmmetrics select(mapColumn(",
				"          ID,",
				"          Updated,",
				"          Confirmed,",
				"          Confirmed_Change,",
				"          Deaths,",
				"          Deaths_Change,",
				"          Recovered,",
				"          Recovered_Change,",
				"          Latitude,",
				"          Longitude,",
				"          ISO2,",
				"          ISO3,",
				"          Country_Region,",
				"          load_time",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> vmmetricsselect",
				"vmcountry select(mapColumn(",
				"          Country,",
				"          CountryCode,",
				"          Latitude,",
				"          Longitude",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> vmcountryselect",
				"vmdate select(mapColumn(",
				"          DateKey,",
				"          Date = FullDate,",
				"          isWeekDay,",
				"          DayOfWeek,",
				"          DayOfMonth,",
				"          DayOfQuarter,",
				"          DayOfYear,",
				"          DayName,",
				"          WeekOfYear,",
				"          WeekName,",
				"          MonthOfYear,",
				"          MonthName,",
				"          CalendarQuarter,",
				"          CalendarQuarterName,",
				"          CalendarYear,",
				"          FiscalMonth,",
				"          FiscalMonthName,",
				"          FiscalQuarter,",
				"          FiscalQuarterName,",
				"          FiscalYear",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> vmdateselect",
				"cosmosdbcolumns, azuresqlmetricsselect, azuresqldateselect, azuresqlcountryselect, vmmetricsselect, vmcountryselect, vmdateselect union(byName: true)~> metricsandpolicyunion",
				"metricsandpolicyunion sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> metricspolicysink"
			]
		}
	}
}
{
	"name": "TEST2DataFlow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Parquetvmmetrics",
						"type": "DatasetReference"
					},
					"name": "VMMetrics"
				},
				{
					"dataset": {
						"referenceName": "Parquetazuresqlmetrics",
						"type": "DatasetReference"
					},
					"name": "AzureMetrics"
				},
				{
					"dataset": {
						"referenceName": "Parquetvmmetrics",
						"type": "DatasetReference"
					},
					"name": "VMMetrics2"
				},
				{
					"dataset": {
						"referenceName": "Parquetazuresqlmetrics",
						"type": "DatasetReference"
					},
					"name": "AzureMetrics2"
				},
				{
					"dataset": {
						"referenceName": "Parquetvmmetrics",
						"type": "DatasetReference"
					},
					"name": "VMMetrics3"
				},
				{
					"dataset": {
						"referenceName": "Parquetazuresqlmetrics",
						"type": "DatasetReference"
					},
					"name": "AzureMetrics3"
				},
				{
					"dataset": {
						"referenceName": "Parquetvmcountry",
						"type": "DatasetReference"
					},
					"name": "VMCountry"
				},
				{
					"dataset": {
						"referenceName": "Parquetazuresqlcountry",
						"type": "DatasetReference"
					},
					"name": "AzureCountry"
				},
				{
					"dataset": {
						"referenceName": "Parquetvmdate",
						"type": "DatasetReference"
					},
					"name": "VMDates"
				},
				{
					"dataset": {
						"referenceName": "Parquetvmdate",
						"type": "DatasetReference"
					},
					"name": "AzureDates"
				}
			],
			"sinks": [
				{
					"name": "SinkCases"
				}
			],
			"transformations": [
				{
					"name": "SelectCases"
				},
				{
					"name": "SelectCasesAzure"
				},
				{
					"name": "UnionCases"
				},
				{
					"name": "SelectDeaths"
				},
				{
					"name": "SelectDeaths2"
				},
				{
					"name": "UnionDeaths"
				},
				{
					"name": "SelectRecoveries"
				},
				{
					"name": "SelectRecoveries2"
				},
				{
					"name": "UnionRecoveries"
				},
				{
					"name": "SelectCountry"
				},
				{
					"name": "SelectCountry2"
				},
				{
					"name": "UnionGeographies"
				},
				{
					"name": "SelectDate"
				},
				{
					"name": "SelectDate2"
				},
				{
					"name": "UnionDates"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ID as integer,",
				"          Updated as date,",
				"          Confirmed as integer,",
				"          Confirmed_Change as integer,",
				"          Deaths as integer,",
				"          Deaths_Change as integer,",
				"          Recovered as integer,",
				"          Recovered_Change as integer,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5),",
				"          ISO2 as string,",
				"          ISO3 as string,",
				"          Country_Region as string,",
				"          load_time as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> VMMetrics",
				"source(output(",
				"          ID as integer,",
				"          Updated as date,",
				"          Confirmed as integer,",
				"          Confirmed_Change as integer,",
				"          Deaths as integer,",
				"          Deaths_Change as integer,",
				"          Recovered as integer,",
				"          Recovered_Change as integer,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5),",
				"          ISO2 as string,",
				"          ISO3 as string,",
				"          Country_Region as string,",
				"          load_time as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> AzureMetrics",
				"source(output(",
				"          ID as integer,",
				"          Updated as date,",
				"          Confirmed as integer,",
				"          Confirmed_Change as integer,",
				"          Deaths as integer,",
				"          Deaths_Change as integer,",
				"          Recovered as integer,",
				"          Recovered_Change as integer,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5),",
				"          ISO2 as string,",
				"          ISO3 as string,",
				"          Country_Region as string,",
				"          load_time as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> VMMetrics2",
				"source(output(",
				"          ID as integer,",
				"          Updated as date,",
				"          Confirmed as integer,",
				"          Confirmed_Change as integer,",
				"          Deaths as integer,",
				"          Deaths_Change as integer,",
				"          Recovered as integer,",
				"          Recovered_Change as integer,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5),",
				"          ISO2 as string,",
				"          ISO3 as string,",
				"          Country_Region as string,",
				"          load_time as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> AzureMetrics2",
				"source(output(",
				"          ID as integer,",
				"          Updated as date,",
				"          Confirmed as integer,",
				"          Confirmed_Change as integer,",
				"          Deaths as integer,",
				"          Deaths_Change as integer,",
				"          Recovered as integer,",
				"          Recovered_Change as integer,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5),",
				"          ISO2 as string,",
				"          ISO3 as string,",
				"          Country_Region as string,",
				"          load_time as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> VMMetrics3",
				"source(output(",
				"          ID as integer,",
				"          Updated as date,",
				"          Confirmed as integer,",
				"          Confirmed_Change as integer,",
				"          Deaths as integer,",
				"          Deaths_Change as integer,",
				"          Recovered as integer,",
				"          Recovered_Change as integer,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5),",
				"          ISO2 as string,",
				"          ISO3 as string,",
				"          Country_Region as string,",
				"          load_time as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> AzureMetrics3",
				"source(output(",
				"          Country as string,",
				"          CountryCode as string,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> VMCountry",
				"source(output(",
				"          Country as string,",
				"          CountryCode as string,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> AzureCountry",
				"source(output(",
				"          DateKey as integer,",
				"          FullDate as date,",
				"          isWeekDay as boolean,",
				"          DayOfWeek as integer,",
				"          DayOfMonth as integer,",
				"          DayOfQuarter as integer,",
				"          DayOfYear as integer,",
				"          DayName as string,",
				"          WeekOfYear as integer,",
				"          WeekName as string,",
				"          MonthOfYear as integer,",
				"          MonthName as string,",
				"          CalendarQuarter as integer,",
				"          CalendarQuarterName as string,",
				"          CalendarYear as integer,",
				"          FiscalMonth as integer,",
				"          FiscalMonthName as string,",
				"          FiscalQuarter as integer,",
				"          FiscalQuarterName as string,",
				"          FiscalYear as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> VMDates",
				"source(output(",
				"          DateKey as integer,",
				"          FullDate as date,",
				"          isWeekDay as boolean,",
				"          DayOfWeek as integer,",
				"          DayOfMonth as integer,",
				"          DayOfQuarter as integer,",
				"          DayOfYear as integer,",
				"          DayName as string,",
				"          WeekOfYear as integer,",
				"          WeekName as string,",
				"          MonthOfYear as integer,",
				"          MonthName as string,",
				"          CalendarQuarter as integer,",
				"          CalendarQuarterName as string,",
				"          CalendarYear as integer,",
				"          FiscalMonth as integer,",
				"          FiscalMonthName as string,",
				"          FiscalQuarter as integer,",
				"          FiscalQuarterName as string,",
				"          FiscalYear as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> AzureDates",
				"VMMetrics select(mapColumn(",
				"          Updated,",
				"          Confirmed,",
				"          Confirmed_Change,",
				"          ISO2,",
				"          ISO3,",
				"          Country_Region",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectCases",
				"AzureMetrics select(mapColumn(",
				"          Updated,",
				"          Confirmed,",
				"          Confirmed_Change,",
				"          ISO2,",
				"          ISO3,",
				"          Country_Region",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectCasesAzure",
				"SelectCases, SelectCasesAzure union(byName: true)~> UnionCases",
				"VMMetrics2 select(mapColumn(",
				"          Updated,",
				"          Deaths,",
				"          Deaths_Change,",
				"          ISO2,",
				"          ISO3,",
				"          Country_Region",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectDeaths",
				"AzureMetrics2 select(mapColumn(",
				"          Updated,",
				"          Deaths,",
				"          Deaths_Change,",
				"          ISO2,",
				"          ISO3,",
				"          Country_Region",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectDeaths2",
				"SelectDeaths, SelectDeaths2 union(byName: true)~> UnionDeaths",
				"VMMetrics3 select(mapColumn(",
				"          Updated,",
				"          Recovered,",
				"          Recovered_Change,",
				"          ISO2,",
				"          ISO3,",
				"          Country_Region",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectRecoveries",
				"AzureMetrics3 select(mapColumn(",
				"          Updated,",
				"          Recovered,",
				"          Recovered_Change,",
				"          ISO2,",
				"          ISO3,",
				"          Country_Region",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectRecoveries2",
				"SelectRecoveries, SelectRecoveries2 union(byName: true)~> UnionRecoveries",
				"VMCountry select(mapColumn(",
				"          Country,",
				"          CountryCode",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectCountry",
				"AzureCountry select(mapColumn(",
				"          Country,",
				"          CountryCode",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectCountry2",
				"SelectCountry, SelectCountry2 union(byName: true)~> UnionGeographies",
				"VMDates select(mapColumn(",
				"          FullDate,",
				"          CalendarQuarter",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectDate",
				"AzureDates select(mapColumn(",
				"          FullDate,",
				"          CalendarQuarter",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectDate2",
				"SelectDate, SelectDate2 union(byName: true)~> UnionDates",
				"UnionCases sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SinkCases"
			]
		}
	}
}